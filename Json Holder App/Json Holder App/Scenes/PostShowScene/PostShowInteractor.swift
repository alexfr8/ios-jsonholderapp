//
//  PostShowInteractor.swift
//  Json Holder App
//
//  Created by Alejandro Fernández Ruiz on 26/11/2019.
//  Copyright (c) 2019 Alejandro Fernández Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostShowBusinessLogic {
    func setupView()
    func closeDialog()
    func getComments()
    func getCommentCount() -> Int
    func getDataForCommentCell(index: Int) -> PostShow.Models.CommentCellData
}

protocol PostShowDataStore {
    //var name: String { get set }
    var postData: Post? {get set}
    var commentList: [Comment]? {get set}
}

class PostShowInteractor: PostShowBusinessLogic, PostShowDataStore {
   

    var postData: Post?
    var commentList: [Comment]?
    
    var presenter: PostShowPresentationLogic?
    var worker: PostShowWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func setupView() {
        worker = PostShowWorker()
        let response: PostShow.Models.Response = PostShow.Models.Response()
        presenter?.setupView(response: response)
    }
    
    func closeDialog() {
        presenter?.makeDismiss()
    }
    
    func getComments() {
        worker?.getCommentsForPost(postId: self.postData?.id ?? 0, completionHandler: { (responseComments, errorString) in
            if errorString.isEmpty {
                self.commentList = responseComments
                self.presenter?.reloadTable()
            } else {
                self.presenter?.showError(msg: errorString)
            }
        })
        var response: PostShow.Models.Response = PostShow.Models.Response()
        response.postSelected = self.postData
        self.presenter?.setupPost(response: response)
    }
       
    //MARK: - METHOD TO POPULATE CELLS
       
       func getCommentCount() -> Int {
           return commentList?.count ?? 0
       }
       
       func getDataForCommentCell(index: Int) -> PostShow.Models.CommentCellData {
           var data :PostShow.Models.CommentCellData = PostShow.Models.CommentCellData()
           data.name = commentList?.getElement(index)?.name
           data.email = commentList?.getElement(index)?.email
           data.body = commentList?.getElement(index)?.body
           
           return data
       }
}
