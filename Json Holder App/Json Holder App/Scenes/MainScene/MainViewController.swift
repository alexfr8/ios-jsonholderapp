//
//  MainViewController.swift
//  Json Holder App
//
//  Created by Alejandro Fernández Ruiz on 24/11/2019.
//  Copyright (c) 2019 Alejandro Fernández Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func setupView(viewModel: Main.Models.ViewModel)
    func showUsers()
    func showPostForUser(viewModel: Main.Models.ViewModel)
    func showError(msg: String)
    func showCommentsForPost(viewModel: Main.Models.ViewModel)
    
}

class MainViewController: BaseViewController {
    
    @IBOutlet weak var lblEmail: UILabel!
    @IBOutlet weak var lblPhone: UILabel!
    @IBOutlet weak var lblUserName: UILabel!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var lblWebsite: UILabel!
    @IBOutlet weak var lblAddress: UILabel!
    
    @IBOutlet weak var stackView: UIStackView!
    @IBOutlet weak var collectionUsers: UICollectionView!
    @IBOutlet weak var collectionTodos: UICollectionView!
    @IBOutlet weak var collectionPosts: UICollectionView!
    
    @IBOutlet weak var lblPostTitle: UILabel!
    
    @IBOutlet weak var lblTodoTitle: UILabel!
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.setupView()
        interactor?.getAllUsers()
    }
}

extension MainViewController: MainDisplayLogic {

    
    func setupView(viewModel: Main.Models.ViewModel) {
        
        self.collectionUsers.isHidden = true
        self.stackView.isHidden = true
        self.lblName.text = ""
        self.lblEmail.text = ""
        self.lblPhone.text = ""
        self.lblAddress.text = ""
        self.lblWebsite.text = ""
        self.lblUserName.text = ""
        
        setupFlowLayoutForUICollection(collection: collectionTodos)
        setupFlowLayoutForUICollection(collection: collectionPosts)
        setupFlowLayoutForUICollection(collection: collectionUsers)
        
        registerUserCollection()
        registerPostCollection()
        registerTodoCollection()
    }
    
    func showUsers() {
        collectionUsers.reloadData()
        collectionUsers.isHidden = false
    }
    
    func showPostForUser(viewModel: Main.Models.ViewModel) {
        collectionPosts.reloadData()
        collectionTodos.reloadData()
        stackView.isHidden = false
        self.lblName.text = viewModel.user?.name
        self.lblEmail.text = viewModel.user?.email
        self.lblPhone.text = viewModel.user?.phone
        self.lblAddress.text = viewModel.user?.address?.city
        self.lblWebsite.text = viewModel.user?.website
        self.lblUserName.text = viewModel.user?.username
        
        self.lblTodoTitle.text = viewModel.lblTodoTitle
        self.lblPostTitle.text = viewModel.lblPostTitle
    }
    
    private func setupFlowLayoutForUICollection(collection: UICollectionView) {
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.itemSize = CGSize(width: UIScreen.main.bounds.width/2-10, height: 190)
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5)
        flowLayout.scrollDirection = UICollectionView.ScrollDirection.horizontal
        flowLayout.minimumInteritemSpacing = 0.0
        collection.collectionViewLayout = flowLayout
    }
    
    private func registerUserCollection() {
        collectionUsers.register(UINib(nibName: String(describing: UserCollectionCell.self), bundle: nil), forCellWithReuseIdentifier: UserCollectionCell.cellIdentifier)
        collectionUsers.backgroundColor = UIColor.clear
        collectionUsers.delegate = self
        collectionUsers.dataSource = self
    }
    
    private func registerPostCollection() {
        collectionPosts.register(UINib(nibName: String(describing: PostCollectionCell.self), bundle: nil), forCellWithReuseIdentifier: PostCollectionCell.cellIdentifier)
        collectionPosts.backgroundColor = UIColor.clear
        collectionPosts.delegate = self
        collectionPosts.dataSource = self
    }
    
    private func registerTodoCollection() {
        collectionTodos.register(UINib(nibName: String(describing: TodoCollectionCell.self), bundle: nil), forCellWithReuseIdentifier: TodoCollectionCell.cellIdentifier)
        collectionTodos.backgroundColor = UIColor.clear
        collectionTodos.delegate = self
        collectionTodos.dataSource = self
    }
    
  
}

extension MainViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout  {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == collectionUsers {
            return self.interactor?.getUserCount() ?? 0
        } else if collectionView ==  collectionPosts {
            return self.interactor?.getPostCount() ?? 0
        } else if collectionView == collectionTodos {
            return self.interactor?.getTodoCount() ?? 0
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if collectionView == collectionUsers {
            return self.getCellForUser(index: indexPath, collectionView: collectionView)
        } else if collectionView == collectionPosts {
            return self.getCellForPost(index: indexPath, collectionView: collectionView)
        } else {
            return self.getCellForTodo(index: indexPath, collectionView: collectionView)
        }
    }
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == collectionUsers {
            self.interactor?.userSelected(userIndex: indexPath.row)
        } else if collectionView == collectionPosts {
            self.interactor?.postSelected(index: indexPath)
        }
    }
    
    private func getCellForUser(index: IndexPath, collectionView: UICollectionView) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: UserCollectionCell.cellIdentifier, for: index) as? UserCollectionCell else {
            return UICollectionViewCell()
        }
        
        let cellData = self.interactor?.getDataForUserCell(index: index.row)
        cell.updateUI(username: cellData?.user?.username ?? "unknown")
        return cell
    }
    
    private func getCellForPost(index: IndexPath, collectionView: UICollectionView) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PostCollectionCell.cellIdentifier, for: index) as? PostCollectionCell else {
            return UICollectionViewCell()
        }
        
        let cellData = self.interactor?.getDataForPostCell(index: index.row)
        cell.updateUI(postName: cellData?.post?.title ?? "unknown")
        return cell
    }
    
    private func getCellForTodo(index: IndexPath, collectionView: UICollectionView) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TodoCollectionCell.cellIdentifier, for: index) as? TodoCollectionCell else {
            return UICollectionViewCell()
        }
        
        let cellData = self.interactor?.getDataForTodoCell(index: index.row)
        cell.updateUI(username: cellData?.todo?.title ?? "unknown")
        return cell
    }
    
    // MARK: - NAVIGATION
    
    func showCommentsForPost(viewModel: Main.Models.ViewModel) {
        self.router?.navigateToPostComments(viewModel: viewModel)
    }
    
}
