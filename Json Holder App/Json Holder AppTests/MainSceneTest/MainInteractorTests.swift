//
//  MainInteractorTests.swift
//  Json Holder App
//
//  Created by Alejandro Fernández Ruiz on 25/11/2019.
//  Copyright (c) 2019 Alejandro Fernández Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Json_Holder_App
import XCTest

class MainInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: MainInteractor!
    var userList: [User]?
    var postList: [Post]?
    var todoList: [Todo]?
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupMainInteractor()
        var user1 = User()
        user1.id = 1
        user1.name = "name 1"
        var user2 = User()
        user2.id = 2
        user2.name = "name 2"
        userList = [user1, user2]
        
        var tod1 = Todo()
        tod1.id = 1
        tod1.title = "title 1"
        var tod2 = Todo()
        tod2.id = 2
        tod2.title = "Title 2"
        todoList = [tod1,tod2]
        
        var post1 = Post()
        post1.id = 1
        post1.title = "Title1"
        var post2 = Post()
        post2.id = 2
        post2.title = "Title2"
        postList = [post1, post2]
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMainInteractor() {
        sut = MainInteractor()
    }
    
    // MARK: Test doubles
    
    class MainPresentationLogicSpy: MainPresentationLogic {
        var setupViewCalled = false
        var presentAllUserCalled = false
        var presentPostAndTodosForUserIdCalled = false
        var prepareNavigationForCalled = false
        var showErrorCalled = false
        
        func setupView(response: Main.Models.Response) {
            setupViewCalled = true
        }
        
        func presentAllUser() {
            presentAllUserCalled = true
        }
        
        func presentPostAndTodosForUserId(response: Main.Models.Response) {
            presentPostAndTodosForUserIdCalled = true
        }
        
        func prepareNavigationFor(response: Main.Models.Response) {
            prepareNavigationForCalled = true
        }
        
        func showError(msg: String) {
            showErrorCalled = true
        }
        
    }
    
    class SuccessMainWorkerSpy : MainWorker {
        
        override func getAllUsers(completionHandler: @escaping ([User], String) -> Void) {
            var user1 = User()
            user1.id = 1
            user1.name = "name 1"
            var user2 = User()
            user2.id = 2
            user2.name = "name 2"
            
            
            completionHandler( [user1, user2], "")
        }
        
        override func getPostByUserAndTodos(userId: Int, completionHandler: @escaping ([Todo], [Post], String) -> Void) {
            var tod1 = Todo()
            tod1.id = 1
            tod1.title = "title 1"
            var tod2 = Todo()
            tod2.id = 2
            tod2.title = "Title 2"
            
            var post1 = Post()
            post1.id = 1
            post1.title = "Title1"
            var post2 = Post()
            post2.id = 2
            post2.title = "Title2"
            completionHandler([tod1, tod2],[post1, post2],"")
        }
    }
    
    class FailureMainWorkerSpy : MainWorker {
        
        override func getAllUsers(completionHandler: @escaping ([User], String) -> Void) {
            
            completionHandler([], "error for the download users")
        }
        
        override func getPostByUserAndTodos(userId: Int, completionHandler: @escaping ([Todo], [Post], String) -> Void) {
            
            completionHandler([],[],"error downloading todos and post")
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "this methods uses the setupview method of the presenter")
    }
    
    func testGetAllUsersSuccess() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.worker = SuccessMainWorkerSpy()
        // When
        sut.getAllUsers()
        waitUI()
        // Then
        XCTAssertTrue(spy.presentAllUserCalled, "this method uses the presentall user method of the presenter")
    }
    
    func testGetAllUsersError() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.worker = FailureMainWorkerSpy()
        // When
        sut.getAllUsers()
        waitUI(withDelay: 1)
        // Then
        XCTAssertTrue(spy.showErrorCalled, "this method must call the show error")
    }
    
    func testUserSelected() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.userList = userList
        sut.worker = SuccessMainWorkerSpy()
        // When
        sut.userSelected(userIndex: 0)
        waitUI(withDelay: 1)
        // Then
        XCTAssertTrue(spy.presentPostAndTodosForUserIdCalled, "this method must call the show error")
    }
    
    func testGetUserCount() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.userList = userList
        // When
        let count =  sut.getUserCount()
        
        // Then
        XCTAssertEqual(count, userList?.count, "")
    }
    
    func testGetTodoCount() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.todoList = todoList
        // When
        let count =  sut.getTodoCount()
        
        // Then
        XCTAssertEqual(count, todoList?.count, "")
    }
    
    func testGetPostCount() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.postList = postList
        // When
        let count =  sut.getPostList()
        
        // Then
        XCTAssertEqual(count, postList?.count, "")
    }
    
    func testGetDataForUserCell() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.userList = userList
        // When
        let data =  sut.getDataForUserCell(index: 0)
        
        // Then
        XCTAssertEqual(data.user?.id, userList?[0].id, "")
    }
    
    func testGetDataForPostCell() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.postList = postList
        // When
        let data =  sut.getDataForPostCell(index: 0)
        
        // Then
        XCTAssertEqual(data.post?.id, postList?[0].id, "")
    }
    
    func testGetDataForTodoCell() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.todoList = todoList
        // When
        let data =  sut.getDataForTodoCell(index: 0)
        
        // Then
        XCTAssertEqual(data.todo?.id, todoList?[0].id, "")
    }
    
    func testPostSelected() {
        // Given
        let spy = MainPresentationLogicSpy()
        sut.presenter = spy
        
        sut.postList = postList
        let index: IndexPath = IndexPath(row: 0, section: 0)
        // When
        sut.postSelected(index: index)
        
        // Then
        XCTAssertTrue(spy.prepareNavigationForCalled)
    }
    
    
}
