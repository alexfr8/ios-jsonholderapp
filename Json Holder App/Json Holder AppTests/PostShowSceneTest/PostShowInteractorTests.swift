//
//  PostShowInteractorTests.swift
//  Json Holder App
//
//  Created by Alejandro Fernández Ruiz on 28/11/2019.
//  Copyright (c) 2019 Alejandro Fernández Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Json_Holder_App
import XCTest

class PostShowInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: PostShowInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupPostShowInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPostShowInteractor() {
        sut = PostShowInteractor()
    }
    
    // MARK: Test doubles
    
    class PostShowPresentationLogicSpy: PostShowPresentationLogic {
        
        var setupviewCalled = false
        var makeDismissCalled = false
        var showErrorCalled = false
        var reloadTableCalled = false
        var setupPostCalled = false
        
        
        func setupView(response: PostShow.Models.Response) {
            setupviewCalled = true
        }
        
        func makeDismiss() {
            makeDismissCalled = true
        }
        
        func showError(msg: String) {
            showErrorCalled = true
        }
        
        func reloadTable() {
            reloadTableCalled = true
        }
        
        func setupPost(response: PostShow.Models.Response) {
            setupPostCalled = true
        }
        
    }
    
    class SuccessPostShowWorker : PostShowWorker {
        
        override func getCommentsForPost(postId: Int, completionHandler: @escaping ([Comment], String) -> Void) {
            var comment1: Comment = Comment()
            comment1.body = "fake body"
            comment1.email = "mail@fakemail.com"
            comment1.id = 1
            comment1.name = "fake name"
            completionHandler([comment1], "")
        }
        
    }
    class FailurePostShowWorker : PostShowWorker {
        
        override func getCommentsForPost(postId: Int, completionHandler: @escaping ([Comment], String) -> Void) {
            completionHandler([], "error for the download users")
        }
        
    }
    // MARK: Tests
    
    
    func testSetupView() {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupviewCalled, "setupview must call setup from presenter")
    }
    
    func testCloseDialog() {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.closeDialog()
        
        // Then
        XCTAssertTrue(spy.makeDismissCalled, "should close the uiviewcontroller")
    }
    func testGetCommentsSuccess() {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.worker = SuccessPostShowWorker()
        sut.getComments()
        waitUI()
        // Then
        XCTAssertTrue(spy.reloadTableCalled, "success request must setup data and reload the table")
    }
    
    func testGetCommentsFailure() {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.worker = FailurePostShowWorker()
        sut.getComments()
        waitUI()
        // Then
        XCTAssertTrue(spy.showErrorCalled, "failure request must show the error")
    }
    
    func testGetCommentCount()  {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.commentList = [Comment()]
        let value = sut.getCommentCount()
        waitUI()
        // Then
        XCTAssertEqual(sut.commentList?.count, value, "method should count the comment list number of elements")
    }
    
    func testGetDataForCommentCell() {
        // Given
        let spy = PostShowPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        var comment1: Comment = Comment()
        comment1.body = "fake body"
        comment1.email = "mail@fakemail.com"
        comment1.id = 1
        comment1.name = "fake name"
        sut.commentList = [comment1]
        let data = sut.getDataForCommentCell(index: 0)
        waitUI()
        // Then
        XCTAssertEqual(comment1.name, data.name, "Get data for the index provided")
    }
    
   
}
