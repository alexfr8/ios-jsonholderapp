//
//  PostShowPresenterTests.swift
//  Json Holder App
//
//  Created by Alejandro Fernández Ruiz on 28/11/2019.
//  Copyright (c) 2019 Alejandro Fernández Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Json_Holder_App
import XCTest

class PostShowPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: PostShowPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupPostShowPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPostShowPresenter() {
        sut = PostShowPresenter()
    }
    
    // MARK: Test doubles
    
    class PostShowDisplayLogicSpy: PostShowDisplayLogic {
        
        var setupViewCalled = false
        var doCloseCalled = false
        var showPostCalled = false
        var showErroCalled = false
        var reloadTableCalled = false
        
        
        
        func setupView(viewModel: PostShow.Models.ViewModel) {
            setupViewCalled = true
        }
        
        func doClose() {
            doCloseCalled = true
        }
        
        func showPost(viewModel: PostShow.Models.ViewModel) {
            showPostCalled = true
        }
        
        func showError(msg: String) {
            showErroCalled = true
        }
        
        func reloadTable() {
            reloadTableCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = PostShowDisplayLogicSpy()
        sut.viewController = spy
        let response = PostShow.Models.Response()
        
        // When
        sut.setupView(response: response)
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "should call the setupview method")
    }
    
    func testMakeDismiss() {
        // Given
        let spy = PostShowDisplayLogicSpy()
        sut.viewController = spy
        
        
        // When
        sut.makeDismiss()
        
        // Then
        XCTAssertTrue(spy.doCloseCalled, "should call the method to close the view")
    }
    
    func testShowError() {
        // Given
        let spy = PostShowDisplayLogicSpy()
        sut.viewController = spy
        
        
        // When
        sut.makeDismiss()
        
        // Then
        XCTAssertTrue(spy.doCloseCalled, "should call the method to close the view")
    }
    
    func testReloadTable() {
        // Given
        let spy = PostShowDisplayLogicSpy()
        sut.viewController = spy
        
        
        // When
        sut.reloadTable()
        
        // Then
        XCTAssertTrue(spy.reloadTableCalled, "should call the method to reload table")
    }
    
    func testSetupPost() {
        // Given
        let spy = PostShowDisplayLogicSpy()
        sut.viewController = spy
        
         let response = PostShow.Models.Response()
        // When
        sut.setupPost(response: response)
        
        // Then
        XCTAssertTrue(spy.showPostCalled, "should call the method to setup the post title")
    }
    
}
